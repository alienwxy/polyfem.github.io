{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PolyFEM \u00b6 A polyvalent C++ FEM library. Compilation \u00b6 Download the code from the repository . All the C++ dependencies required to build the code are included. It should work on Windows, macOS and Linux, and it should build out of the box with CMake: mkdir build cd build cmake .. make -j4 On Linux zenity is required for the file dialog window to work. On macOS and Windows the native windows are used directly. The formula for higher order bases are computed at CMake time using an external python script. Consequently, PolyFEM requires a working installation of Python and some additional packages in order to build correctly: numpy and sympy quadpy (optional) Usage \u00b6 The main executable, ./PolyFEM_bin , can be called with a GUI or through a command-line interface. Simply run: ./PolyFEM_bin Documentation \u00b6 Quickstart tutorial (coming soon). Reference documentation for the json configuration and problem types. License \u00b6 The code of PolyFEM itself is licensed under MIT License . However, please be mindful of third-party libraries which are used by PolyFEM, and may be available under a different license. Citation \u00b6 If you use PolyFEM in your project, please consider citing our work: @article { Schneider:2018:DSA , author = {Teseo Schneider and Yixin Hu and J\u00e9r\u00e9mie Dumas and Xifeng Gao and Daniele Panozzo and Denis Zorin} , journal = {ACM Transactions on Graphics} , link = {} , month = {10} , number = {6} , publisher = {Association for Computing Machinery (ACM)} , title = {Decoupling Simulation Accuracy from Mesh Quality} , volume = {37} , year = {2018} }","title":"Home"},{"location":"#polyfem","text":"A polyvalent C++ FEM library.","title":"PolyFEM"},{"location":"#compilation","text":"Download the code from the repository . All the C++ dependencies required to build the code are included. It should work on Windows, macOS and Linux, and it should build out of the box with CMake: mkdir build cd build cmake .. make -j4 On Linux zenity is required for the file dialog window to work. On macOS and Windows the native windows are used directly. The formula for higher order bases are computed at CMake time using an external python script. Consequently, PolyFEM requires a working installation of Python and some additional packages in order to build correctly: numpy and sympy quadpy (optional)","title":"Compilation"},{"location":"#usage","text":"The main executable, ./PolyFEM_bin , can be called with a GUI or through a command-line interface. Simply run: ./PolyFEM_bin","title":"Usage"},{"location":"#documentation","text":"Quickstart tutorial (coming soon). Reference documentation for the json configuration and problem types.","title":"Documentation"},{"location":"#license","text":"The code of PolyFEM itself is licensed under MIT License . However, please be mindful of third-party libraries which are used by PolyFEM, and may be available under a different license.","title":"License"},{"location":"#citation","text":"If you use PolyFEM in your project, please consider citing our work: @article { Schneider:2018:DSA , author = {Teseo Schneider and Yixin Hu and J\u00e9r\u00e9mie Dumas and Xifeng Gao and Daniele Panozzo and Denis Zorin} , journal = {ACM Transactions on Graphics} , link = {} , month = {10} , number = {6} , publisher = {Association for Computing Machinery (ACM)} , title = {Decoupling Simulation Accuracy from Mesh Quality} , volume = {37} , year = {2018} }","title":"Citation"},{"location":"documentation/","text":"Json files \u00b6 Complete example { \"mesh\" : \" \" , \"Mesh path\" \"bc_tag\" : \" \" , \"Path to the boundary tag file, each face/edge is associated with an unique number (you can use bc_setter for setting them in 3d)\" \"boundary_id_threshold\" : -1 , \"Distance from bounding box for a face/edge to belong to boundary. Negative falls into defaul: in 2d is 1e-7, in 3d 1e-2\" \"normalize_mesh\" : true , \"Normalize mesh such that it fits in the [0,1] bounding box\" \"n_refs\" : 0 , \"Number of uniform refinement\" \"refinenemt_location\" : 0.5 , \"Refiniement location of polyhedra\" \"scalar_formulation\" : \"Laplacian\" , \"tensor_formulation\" : \"LinearElasticity\" , \"mixed_formulation\" : \"Stokes\" , \"count_flipped_els\" : false , \"Count (or not) flipped elements\" \"iso_parametric\" : false , \"Force isoparametric elements\" \"discr_order\" : 1 , \"Dicretization order, supports P1, P2, P3, P4, Q1, Q2\" \"pressure_discr_order\" : 1 , \"Pressure dicrezation order, for mixed formulation\" \"output\" : \"\" , \"Output json path\" \"problem\" : \"Franke\" , \"Problem to solve\" \"problem_params\" : {}, \"Problem specific parameters\" \"n_boundary_samples\" : 6 , \"number of boundary samples (Dirichelt) or quadrature points (Neumann)\" \"quadrature_order\" : 4 , \"quadrature order\" \"export\" : { \"Export options\" \"full_mat\" : \"\" , \"Stiffnes matrix without boundary conditions\" \"iso_mesh\" : \"\" , \"Isolines mesh\" \"nodes\" : \"\" , \"FE nodes\" \"solution\" : \"\" , \"Solution vector\" \"spectrum\" : false , \"Spectrum of the stiffness matrix\" \"stiffness_mat\" : \"\" , \"Stiffmess matrix after setting boundary conditions\" \"vis_boundary_only\" : false , \"Exports only the boundary of volumetric meshes\" \"vis_mesh\" : \"\" , \"Path for the vtu mesh\" \"wire_mesh\" : \"\" \"Wireframe of the mesh\" }, \"use_spline\" : false , \"Use spline for quad/hex elements\" \"fit_nodes\" : false , \"Fit nodes for spline basis\" \"integral_constraints\" : 2 , \"Number of constraints for polygonal basis 0, 1, or 2\" \"n_harmonic_samples\" : 10 , \"Number of face/line samples for harmonic bases for polyhedra\" \"B\" : 3 , \"User provided parameter for pref tolerance\" \"use_p_ref\" : false , \"Enable prefinement for badly shaped simplices\" \"discr_order_max\" : 4 , \"Maximum allowed dicrezation oder, used in p pref\" \"h1_formula\" : false , \"Use pref formula for h1 bound\" \"solver_type\" : \"Pardiso\" , \"Library for linear solver\" \"precond_type\" : \"Eigen::DiagonalPreconditioner\" , \"solver_params\" : {}, \"solver specific parameters\" \"nl_solver\" : \"newton\" , \"Non linear solver\" \"line_search\" : \"armijo\" , \"Line search for newton solver\" \"nl_solver_rhs_steps\" : 1 , \"Number of incremental load steps\" \"save_solve_sequence\" : false , \"Save all incremental load steps\" \"params\" : { \"Material parameter\" \"k\" : 1.0 , \"Constant in helmolz\" \"elasticity_tensor\" : {}, \"Elasticity tensor, used in hooke and saint ventant\" \"E\" : 1.5 , \"Young modulus\" \"nu\" : 0.3 , \"Poisson's ratio\" \"lambda\" : 0.329670329 , \"Lame parameter, E, nu have priority\" \"mu\" : 0.384615384 , }, \"tend\" : 1 , \"End time for time dependent simulations\" \"time_steps\" : 10 , \"Number of time steps for time dependent simulations\" \"vismesh_rel_area\" : 1e-05 \"Relative resolution of the output mesh\" } Optionals \u00b6 scalar_formulation : Helmholtz, Laplacian tensor_formulation : HookeLinearElasticity, LinearElasticity, NeoHookean, Ogden, SaintVenant mixed_formulation : IncompressibleLinearElasticity, Stokes problem : CompressionElasticExact, Cubic, DrivenCavity, Elastic, ElasticExact, ElasticZeroBC, Flow, Franke, GenericScalar, GenericTensor, Gravity, Kernel, Linear, LinearElasticExact, MinSurf, PointBasedTensor, Quadratic, QuadraticElasticExact, Sine, TestProblem, TimeDependentFlow, TimeDependentScalar, TorsionElastic, Zero_BC solver_type : Eigen::BiCGSTAB, Eigen::ConjugateGradient, Eigen::GMRES, Eigen::MINRES, Eigen::SimplicialLDLT, Eigen::SparseLU, Hypre,Pardiso nl_solver : lbfgs, newton line_search : armijo, armijo_alt, bisection, more_thuente Problems \u00b6 Each problem has a specific set of optional problem_params described here. CompressionElasticExact \u00b6 Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= -\\begin{bmatrix}(y^3 + x^2 + xy)/20\\\\ (3x^4 + xy^2 + x)/20\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= -\\begin{bmatrix}(xy + x^2 + y^3 + 6z)/14\\\\ (zx - z^3 + xy^2 + 3x^4)/14\\\\ (xyz + y^2z^2 - 2x)/14\\end{bmatrix} \\end{align} \\begin{align} f_{2D}(x,y) &= -\\begin{bmatrix}(y^3 + x^2 + xy)/20\\\\ (3x^4 + xy^2 + x)/20\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= -\\begin{bmatrix}(xy + x^2 + y^3 + 6z)/14\\\\ (zx - z^3 + xy^2 + 3x^4)/14\\\\ (xyz + y^2z^2 - 2x)/14\\end{bmatrix} \\end{align} Cubic \u00b6 Has exact solution : true Time dependent : false Form : scalar Description : solve for f(x,y,z) = (2y-0.9)^4 + 0.1 f(x,y,z) = (2y-0.9)^4 + 0.1 DrivenCavity \u00b6 Has exact solution : false Time dependent : false Form : mixed Description : solve for zero right-hand side, and 0.25 for boundary id 1 Elastic \u00b6 Has exact solution : false Time dependent : false Form : tensor Description : solve for zero right-hand side, -0.25 for boundary id \u2155, 0.25 for id 3/6 ElasticExact \u00b6 Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}(y^3 + x^2 + xy)/50\\\\ (3x^4 + xy^2 + x)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}(xy + x^2 + y^3 + 6z)/80\\\\ (xz - z^3 + xy^2 + 3x^4)/80\\\\ (xyz + y^2 z^2 - 2x)/80\\end{bmatrix} \\end{align} \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}(y^3 + x^2 + xy)/50\\\\ (3x^4 + xy^2 + x)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}(xy + x^2 + y^3 + 6z)/80\\\\ (xz - z^3 + xy^2 + 3x^4)/80\\\\ (xyz + y^2 z^2 - 2x)/80\\end{bmatrix} \\end{align} ElasticZeroBC \u00b6 Has exact solution : false Time dependent : false Form : tensor Description : solve for [0, 0.5, 0] right-hand side and zero boundary condition Flow \u00b6 Has exact solution : false Time dependent : false Form : mixed Description : solve for zero right-hand side, [0.25, 0, 0] for boundary id \u2153, [0, 0, 0] for 7 Franke \u00b6 Has exact solution : true Time dependent : false Form : scalar Description : solves for the 2D and 3D Franke function GenericScalar \u00b6 Has exact solution : false Time dependent : false Form : scalar Description : solves for generic tensor problem with zero rhs Options : \"use_mixed_formulation\" : false , \"Use mixed formulation\" \"dirichlet_boundary\" : [ \"List of Dirichelt boundaries\" { \"id\" : 1 , \"Boundary id\" \"value\" : 0 \"Boundary value\" }, { \"id\" : 2 , \"Boundary id\" \"value\" : \"sin(x)+y\" \"Formulas are supported\" }] , \"neumann_boundary\" : [ \"List of Neumann boundaries\" { \"id\" : 3 , \"Boundary id\" \"value\" : 1 , \"Boundary value\" }, { \"id\" : 4 , \"Boundary id\" \"value\" : \"x^2\" \"Formulas are supported\" }] GenericTensor \u00b6 Has exact solution : false Time dependent : false Form : tesor Description : solves for generic tensor problem with zero body forces Options : \"use_mixed_formulation\" : false , \"Use mixed formulation\" \"dirichlet_boundary\" : [ \"List of Dirichelt boundaries\" { \"id\" : 1 , \"Boundary id\" \"value\" : [ 0 , 0 , 0 ], \"Boundary vector value\" \"dimension\" : [ \"Which dimension are Dirichelt\" true , true , false \"In this case z is free\" ] }, { \"id\" : 2 , \"Boundary id\" \"value\" : [ \"sin(x)+y\" , \"z^2\" , 0 ] \"Formulas are supported\" }] , \"neumann_boundary\" : [ \"List of Neumann boundaries\" { \"id\" : 3 , \"Boundary id\" \"value\" : [ 0 , 0 , 0 ] \"Boundary vector value\" }, { \"id\" : 4 , \"Boundary id\" \"value\" : [ \"sin(z)+y\" , \"z^2\" , 0 ] \"Formulas are supported\" }] Gravity \u00b6 Has exact solution : false Time dependent : true Form : tensor Description : solves for 0.1 body force in y direction and zeor for boundray 4 Kernel \u00b6 Has exact solution : true Time dependent : false Form : scalar/tensor Description : solves the omogenous PDE with n_kernels kernels placed on the bounding box at kernel_distance Options : n_kernels sets the number of kernels, kernel_distance sets the distance from the bounding box Linear \u00b6 Has exact solution : true Time dependent : false Form : scalar Description : solve for f(x,y,z) = x LinearElasticExact \u00b6 Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}-(y + x)/50\\\\ -(3x + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y + x + z)/50\\\\ -(3x + y - z)/50\\\\ -(x + y - 2z)/50\\end{bmatrix}\\\\ \\end{align} \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}-(y + x)/50\\\\ -(3x + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y + x + z)/50\\\\ -(3x + y - z)/50\\\\ -(x + y - 2z)/50\\end{bmatrix}\\\\ \\end{align} MinSurf \u00b6 Has exact solution : false Time dependent : false Form : scalar Description : solve for -10 for rhs, and zero Dirichelt boundary condition PointBasedTensor \u00b6 Has exact solution : false Time dependent : false Form : tesor Description : solves for point-based boudary conditions Options : \"scaling\" : 1 , \"Scaling factor\" \"rhs\" : 0 , \"Right-hand side\" \"translation\" : [ 0 , 0 , 0 ] \"Translation\" \"boundary_ids\" : [ \"List of Dirichelt boundaries\" { \"id\" : 1 , \"Boundary id\" \"value\" : [ 0 , 0 , 0 ] \"Boundary vector value\" }, { \"id\" : 2 , \"value\" : { \"Rbf interpolated value\" \"function\" : \"\" , \"Function file\" \"points\" : \"\" , \"Points file\" \"rbf\" : \"gaussian\" , \"Rbf kernel\" \"epsilon\" : 1.5 , \"Rbf epsilon\" \"coordinate\" : 2 , \"Coordinate to ignore\" \"dimension\" : [ \"Which dimension are Dirichelt\" true , true , false \"In this case z is free\" ] } }, , { \"id\" : 2 , \"value\" : { \"Rbf interpolated value\" \"function\" : \"\" , \"Function file\" \"points\" : \"\" , \"Points file\" \"triangles\" : \"\" , \"Triangles file\" \"coordinate\" : 2 , \"Coordinate to ignore\" } }] Quadratic \u00b6 Has exact solution : true Time dependent : false Form : scalar Description : solve for f(x,y,z) = x^2 f(x,y,z) = x^2 QuadraticElasticExact \u00b6 Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix} -(y^2 + x^2 + xy)/50\\\\ -(3x^2 + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y^2 + x^2 + xy + yz)/50\\\\ -(3x^2 + y + z^2)/50\\\\ -(xz + y^2 - 2z)/50\\end{bmatrix} \\end{align} \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix} -(y^2 + x^2 + xy)/50\\\\ -(3x^2 + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y^2 + x^2 + xy + yz)/50\\\\ -(3x^2 + y + z^2)/50\\\\ -(xz + y^2 - 2z)/50\\end{bmatrix} \\end{align} Sine \u00b6 Has exact solution : true Time dependent : false Form : scalar Description : solve for \\begin{align} f(x,y) &= \\sin(10x)\\sin(10y)\\\\ f(x,y,z) &= \\sin(10x)\\sin(10y)\\sin(10z) \\end{align} \\begin{align} f(x,y) &= \\sin(10x)\\sin(10y)\\\\ f(x,y,z) &= \\sin(10x)\\sin(10y)\\sin(10z) \\end{align} TestProblem \u00b6 Has exact solution : true Time dependent : false Form : scalar Description : solve for extreme problem to test errors for high order discretizations TimeDependentFlow \u00b6 Has exact solution : false Time dependent : true Form : mixed Description : solve for zero right-hand side, [0.25, 0, 0] for boundary id \u2153, [0, 0, 0] for 7, and zero inital velocity TimeDependentScalar \u00b6 Has exact solution : false Time dependent : true Form : scalar Description : solve for one right-hand side, zero boundary condition, and zero time boundary TorsionElastic \u00b6 Has exact solution : false Time dependent : false Form : tensor Description : solve for zero body forces, fixed_boundary fixed (zero displacement), turning_boundary rotating around axis_coordiante for n_turns Options : fixed_boundary id of the fixed boundary, turning_boundary id of the moving boundary, axis_coordiante coordinate of the rotating axis, n_turns number of turns Zero_BC \u00b6 Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= (1 - x) x^2 y (1-y)^2\\\\ f_{3D}(x,y,z) &= (1 - x) x^2 y (1-y)^2 z (1 - z) \\end{align} \\begin{align} f_{2D}(x,y) &= (1 - x) x^2 y (1-y)^2\\\\ f_{3D}(x,y,z) &= (1 - x) x^2 y (1-y)^2 z (1 - z) \\end{align}","title":"Documentation"},{"location":"documentation/#json-files","text":"Complete example { \"mesh\" : \" \" , \"Mesh path\" \"bc_tag\" : \" \" , \"Path to the boundary tag file, each face/edge is associated with an unique number (you can use bc_setter for setting them in 3d)\" \"boundary_id_threshold\" : -1 , \"Distance from bounding box for a face/edge to belong to boundary. Negative falls into defaul: in 2d is 1e-7, in 3d 1e-2\" \"normalize_mesh\" : true , \"Normalize mesh such that it fits in the [0,1] bounding box\" \"n_refs\" : 0 , \"Number of uniform refinement\" \"refinenemt_location\" : 0.5 , \"Refiniement location of polyhedra\" \"scalar_formulation\" : \"Laplacian\" , \"tensor_formulation\" : \"LinearElasticity\" , \"mixed_formulation\" : \"Stokes\" , \"count_flipped_els\" : false , \"Count (or not) flipped elements\" \"iso_parametric\" : false , \"Force isoparametric elements\" \"discr_order\" : 1 , \"Dicretization order, supports P1, P2, P3, P4, Q1, Q2\" \"pressure_discr_order\" : 1 , \"Pressure dicrezation order, for mixed formulation\" \"output\" : \"\" , \"Output json path\" \"problem\" : \"Franke\" , \"Problem to solve\" \"problem_params\" : {}, \"Problem specific parameters\" \"n_boundary_samples\" : 6 , \"number of boundary samples (Dirichelt) or quadrature points (Neumann)\" \"quadrature_order\" : 4 , \"quadrature order\" \"export\" : { \"Export options\" \"full_mat\" : \"\" , \"Stiffnes matrix without boundary conditions\" \"iso_mesh\" : \"\" , \"Isolines mesh\" \"nodes\" : \"\" , \"FE nodes\" \"solution\" : \"\" , \"Solution vector\" \"spectrum\" : false , \"Spectrum of the stiffness matrix\" \"stiffness_mat\" : \"\" , \"Stiffmess matrix after setting boundary conditions\" \"vis_boundary_only\" : false , \"Exports only the boundary of volumetric meshes\" \"vis_mesh\" : \"\" , \"Path for the vtu mesh\" \"wire_mesh\" : \"\" \"Wireframe of the mesh\" }, \"use_spline\" : false , \"Use spline for quad/hex elements\" \"fit_nodes\" : false , \"Fit nodes for spline basis\" \"integral_constraints\" : 2 , \"Number of constraints for polygonal basis 0, 1, or 2\" \"n_harmonic_samples\" : 10 , \"Number of face/line samples for harmonic bases for polyhedra\" \"B\" : 3 , \"User provided parameter for pref tolerance\" \"use_p_ref\" : false , \"Enable prefinement for badly shaped simplices\" \"discr_order_max\" : 4 , \"Maximum allowed dicrezation oder, used in p pref\" \"h1_formula\" : false , \"Use pref formula for h1 bound\" \"solver_type\" : \"Pardiso\" , \"Library for linear solver\" \"precond_type\" : \"Eigen::DiagonalPreconditioner\" , \"solver_params\" : {}, \"solver specific parameters\" \"nl_solver\" : \"newton\" , \"Non linear solver\" \"line_search\" : \"armijo\" , \"Line search for newton solver\" \"nl_solver_rhs_steps\" : 1 , \"Number of incremental load steps\" \"save_solve_sequence\" : false , \"Save all incremental load steps\" \"params\" : { \"Material parameter\" \"k\" : 1.0 , \"Constant in helmolz\" \"elasticity_tensor\" : {}, \"Elasticity tensor, used in hooke and saint ventant\" \"E\" : 1.5 , \"Young modulus\" \"nu\" : 0.3 , \"Poisson's ratio\" \"lambda\" : 0.329670329 , \"Lame parameter, E, nu have priority\" \"mu\" : 0.384615384 , }, \"tend\" : 1 , \"End time for time dependent simulations\" \"time_steps\" : 10 , \"Number of time steps for time dependent simulations\" \"vismesh_rel_area\" : 1e-05 \"Relative resolution of the output mesh\" }","title":"Json files"},{"location":"documentation/#optionals","text":"scalar_formulation : Helmholtz, Laplacian tensor_formulation : HookeLinearElasticity, LinearElasticity, NeoHookean, Ogden, SaintVenant mixed_formulation : IncompressibleLinearElasticity, Stokes problem : CompressionElasticExact, Cubic, DrivenCavity, Elastic, ElasticExact, ElasticZeroBC, Flow, Franke, GenericScalar, GenericTensor, Gravity, Kernel, Linear, LinearElasticExact, MinSurf, PointBasedTensor, Quadratic, QuadraticElasticExact, Sine, TestProblem, TimeDependentFlow, TimeDependentScalar, TorsionElastic, Zero_BC solver_type : Eigen::BiCGSTAB, Eigen::ConjugateGradient, Eigen::GMRES, Eigen::MINRES, Eigen::SimplicialLDLT, Eigen::SparseLU, Hypre,Pardiso nl_solver : lbfgs, newton line_search : armijo, armijo_alt, bisection, more_thuente","title":"Optionals"},{"location":"documentation/#problems","text":"Each problem has a specific set of optional problem_params described here.","title":"Problems"},{"location":"documentation/#compressionelasticexact","text":"Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= -\\begin{bmatrix}(y^3 + x^2 + xy)/20\\\\ (3x^4 + xy^2 + x)/20\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= -\\begin{bmatrix}(xy + x^2 + y^3 + 6z)/14\\\\ (zx - z^3 + xy^2 + 3x^4)/14\\\\ (xyz + y^2z^2 - 2x)/14\\end{bmatrix} \\end{align} \\begin{align} f_{2D}(x,y) &= -\\begin{bmatrix}(y^3 + x^2 + xy)/20\\\\ (3x^4 + xy^2 + x)/20\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= -\\begin{bmatrix}(xy + x^2 + y^3 + 6z)/14\\\\ (zx - z^3 + xy^2 + 3x^4)/14\\\\ (xyz + y^2z^2 - 2x)/14\\end{bmatrix} \\end{align}","title":"CompressionElasticExact"},{"location":"documentation/#cubic","text":"Has exact solution : true Time dependent : false Form : scalar Description : solve for f(x,y,z) = (2y-0.9)^4 + 0.1 f(x,y,z) = (2y-0.9)^4 + 0.1","title":"Cubic"},{"location":"documentation/#drivencavity","text":"Has exact solution : false Time dependent : false Form : mixed Description : solve for zero right-hand side, and 0.25 for boundary id 1","title":"DrivenCavity"},{"location":"documentation/#elastic","text":"Has exact solution : false Time dependent : false Form : tensor Description : solve for zero right-hand side, -0.25 for boundary id \u2155, 0.25 for id 3/6","title":"Elastic"},{"location":"documentation/#elasticexact","text":"Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}(y^3 + x^2 + xy)/50\\\\ (3x^4 + xy^2 + x)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}(xy + x^2 + y^3 + 6z)/80\\\\ (xz - z^3 + xy^2 + 3x^4)/80\\\\ (xyz + y^2 z^2 - 2x)/80\\end{bmatrix} \\end{align} \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}(y^3 + x^2 + xy)/50\\\\ (3x^4 + xy^2 + x)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}(xy + x^2 + y^3 + 6z)/80\\\\ (xz - z^3 + xy^2 + 3x^4)/80\\\\ (xyz + y^2 z^2 - 2x)/80\\end{bmatrix} \\end{align}","title":"ElasticExact"},{"location":"documentation/#elasticzerobc","text":"Has exact solution : false Time dependent : false Form : tensor Description : solve for [0, 0.5, 0] right-hand side and zero boundary condition","title":"ElasticZeroBC"},{"location":"documentation/#flow","text":"Has exact solution : false Time dependent : false Form : mixed Description : solve for zero right-hand side, [0.25, 0, 0] for boundary id \u2153, [0, 0, 0] for 7","title":"Flow"},{"location":"documentation/#franke","text":"Has exact solution : true Time dependent : false Form : scalar Description : solves for the 2D and 3D Franke function","title":"Franke"},{"location":"documentation/#genericscalar","text":"Has exact solution : false Time dependent : false Form : scalar Description : solves for generic tensor problem with zero rhs Options : \"use_mixed_formulation\" : false , \"Use mixed formulation\" \"dirichlet_boundary\" : [ \"List of Dirichelt boundaries\" { \"id\" : 1 , \"Boundary id\" \"value\" : 0 \"Boundary value\" }, { \"id\" : 2 , \"Boundary id\" \"value\" : \"sin(x)+y\" \"Formulas are supported\" }] , \"neumann_boundary\" : [ \"List of Neumann boundaries\" { \"id\" : 3 , \"Boundary id\" \"value\" : 1 , \"Boundary value\" }, { \"id\" : 4 , \"Boundary id\" \"value\" : \"x^2\" \"Formulas are supported\" }]","title":"GenericScalar"},{"location":"documentation/#generictensor","text":"Has exact solution : false Time dependent : false Form : tesor Description : solves for generic tensor problem with zero body forces Options : \"use_mixed_formulation\" : false , \"Use mixed formulation\" \"dirichlet_boundary\" : [ \"List of Dirichelt boundaries\" { \"id\" : 1 , \"Boundary id\" \"value\" : [ 0 , 0 , 0 ], \"Boundary vector value\" \"dimension\" : [ \"Which dimension are Dirichelt\" true , true , false \"In this case z is free\" ] }, { \"id\" : 2 , \"Boundary id\" \"value\" : [ \"sin(x)+y\" , \"z^2\" , 0 ] \"Formulas are supported\" }] , \"neumann_boundary\" : [ \"List of Neumann boundaries\" { \"id\" : 3 , \"Boundary id\" \"value\" : [ 0 , 0 , 0 ] \"Boundary vector value\" }, { \"id\" : 4 , \"Boundary id\" \"value\" : [ \"sin(z)+y\" , \"z^2\" , 0 ] \"Formulas are supported\" }]","title":"GenericTensor"},{"location":"documentation/#gravity","text":"Has exact solution : false Time dependent : true Form : tensor Description : solves for 0.1 body force in y direction and zeor for boundray 4","title":"Gravity"},{"location":"documentation/#kernel","text":"Has exact solution : true Time dependent : false Form : scalar/tensor Description : solves the omogenous PDE with n_kernels kernels placed on the bounding box at kernel_distance Options : n_kernels sets the number of kernels, kernel_distance sets the distance from the bounding box","title":"Kernel"},{"location":"documentation/#linear","text":"Has exact solution : true Time dependent : false Form : scalar Description : solve for f(x,y,z) = x","title":"Linear"},{"location":"documentation/#linearelasticexact","text":"Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}-(y + x)/50\\\\ -(3x + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y + x + z)/50\\\\ -(3x + y - z)/50\\\\ -(x + y - 2z)/50\\end{bmatrix}\\\\ \\end{align} \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix}-(y + x)/50\\\\ -(3x + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y + x + z)/50\\\\ -(3x + y - z)/50\\\\ -(x + y - 2z)/50\\end{bmatrix}\\\\ \\end{align}","title":"LinearElasticExact"},{"location":"documentation/#minsurf","text":"Has exact solution : false Time dependent : false Form : scalar Description : solve for -10 for rhs, and zero Dirichelt boundary condition","title":"MinSurf"},{"location":"documentation/#pointbasedtensor","text":"Has exact solution : false Time dependent : false Form : tesor Description : solves for point-based boudary conditions Options : \"scaling\" : 1 , \"Scaling factor\" \"rhs\" : 0 , \"Right-hand side\" \"translation\" : [ 0 , 0 , 0 ] \"Translation\" \"boundary_ids\" : [ \"List of Dirichelt boundaries\" { \"id\" : 1 , \"Boundary id\" \"value\" : [ 0 , 0 , 0 ] \"Boundary vector value\" }, { \"id\" : 2 , \"value\" : { \"Rbf interpolated value\" \"function\" : \"\" , \"Function file\" \"points\" : \"\" , \"Points file\" \"rbf\" : \"gaussian\" , \"Rbf kernel\" \"epsilon\" : 1.5 , \"Rbf epsilon\" \"coordinate\" : 2 , \"Coordinate to ignore\" \"dimension\" : [ \"Which dimension are Dirichelt\" true , true , false \"In this case z is free\" ] } }, , { \"id\" : 2 , \"value\" : { \"Rbf interpolated value\" \"function\" : \"\" , \"Function file\" \"points\" : \"\" , \"Points file\" \"triangles\" : \"\" , \"Triangles file\" \"coordinate\" : 2 , \"Coordinate to ignore\" } }]","title":"PointBasedTensor"},{"location":"documentation/#quadratic","text":"Has exact solution : true Time dependent : false Form : scalar Description : solve for f(x,y,z) = x^2 f(x,y,z) = x^2","title":"Quadratic"},{"location":"documentation/#quadraticelasticexact","text":"Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix} -(y^2 + x^2 + xy)/50\\\\ -(3x^2 + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y^2 + x^2 + xy + yz)/50\\\\ -(3x^2 + y + z^2)/50\\\\ -(xz + y^2 - 2z)/50\\end{bmatrix} \\end{align} \\begin{align} f_{2D}(x,y) &= \\begin{bmatrix} -(y^2 + x^2 + xy)/50\\\\ -(3x^2 + y)/50\\end{bmatrix}\\\\ f_{3D}(x,y,z) &= \\begin{bmatrix}-(y^2 + x^2 + xy + yz)/50\\\\ -(3x^2 + y + z^2)/50\\\\ -(xz + y^2 - 2z)/50\\end{bmatrix} \\end{align}","title":"QuadraticElasticExact"},{"location":"documentation/#sine","text":"Has exact solution : true Time dependent : false Form : scalar Description : solve for \\begin{align} f(x,y) &= \\sin(10x)\\sin(10y)\\\\ f(x,y,z) &= \\sin(10x)\\sin(10y)\\sin(10z) \\end{align} \\begin{align} f(x,y) &= \\sin(10x)\\sin(10y)\\\\ f(x,y,z) &= \\sin(10x)\\sin(10y)\\sin(10z) \\end{align}","title":"Sine"},{"location":"documentation/#testproblem","text":"Has exact solution : true Time dependent : false Form : scalar Description : solve for extreme problem to test errors for high order discretizations","title":"TestProblem"},{"location":"documentation/#timedependentflow","text":"Has exact solution : false Time dependent : true Form : mixed Description : solve for zero right-hand side, [0.25, 0, 0] for boundary id \u2153, [0, 0, 0] for 7, and zero inital velocity","title":"TimeDependentFlow"},{"location":"documentation/#timedependentscalar","text":"Has exact solution : false Time dependent : true Form : scalar Description : solve for one right-hand side, zero boundary condition, and zero time boundary","title":"TimeDependentScalar"},{"location":"documentation/#torsionelastic","text":"Has exact solution : false Time dependent : false Form : tensor Description : solve for zero body forces, fixed_boundary fixed (zero displacement), turning_boundary rotating around axis_coordiante for n_turns Options : fixed_boundary id of the fixed boundary, turning_boundary id of the moving boundary, axis_coordiante coordinate of the rotating axis, n_turns number of turns","title":"TorsionElastic"},{"location":"documentation/#zero_bc","text":"Has exact solution : true Time dependent : false Form : tensor Description : solve for \\begin{align} f_{2D}(x,y) &= (1 - x) x^2 y (1-y)^2\\\\ f_{3D}(x,y,z) &= (1 - x) x^2 y (1-y)^2 z (1 - z) \\end{align} \\begin{align} f_{2D}(x,y) &= (1 - x) x^2 y (1-y)^2\\\\ f_{3D}(x,y,z) &= (1 - x) x^2 y (1-y)^2 z (1 - z) \\end{align}","title":"Zero_BC"},{"location":"tutorial/","text":"Tutorial \u00b6 Here you can find the plate with hole mesh used in this tutorial. UI \u00b6 Start the program with PolyFEM_bin this will open the UI. Press the the load button to load a mesh Then press the numbered button in sequence: Loads the mesh and normalized it Builds the FEM bases, you can change the order by changing discr. To enable pref or spline check the corresponding boxes (before pushing the button) Build a denser mesh for visualization purposes. Assembles the right-hand side of the problem. You can change the problem with the problem drop-down menu Assembles the matrix. You can change the formulation by changing the drop-down 1D nD Mixed form. The type of formulation depends on the problem. For instance Franke works only with scalar formulations, while Elastic only with tensor problems. Solve problem solves the problem. You can compute the error for problems with given exact solutions. In case of no exact solution, the program will compute the norms of the solutions At the end you can press save VTU to save the result.vtu file in the binary directory. This file can be opened with Paraview JSON \u00b6 To run the previous experiment with a json file create a run.json containing (refer to documentation for the full description): { \"mesh\" : \"<mesh.obj>\" , \"normalize_mesh\" : true , \"n_refs\" : 0 , \"scalar_formulation\" : \"Laplacian\" , \"discr_order\" : 1 , \"use_spline\" : false , \"use_p_ref\" : false , \"output\" : \"<stats.json>\" , \"problem\" : \"Franke\" , \"export\" : { \"vis_mesh\" : \"<result.vtu>\" , } } Then run PolyFEM_bin --json run.json --cmd . You can omit the --cmd argument to open the UI with the parameters. Boundary Conditions \u00b6 For more advanced problems such as GenericTensor , TorsionElastic , or DrivenCavity the boundary conditions might be different for each boundary. For instance for the TorsionElastic problem you need to specify which part is fixed and which part moves. PolyFEM uses boundary tags to mark boundary primitives (edges in 2D and faces in 3D). By default: in 2D all edges which barycenter is close up to 1e-7 to the left side of the bounding box gets tag 1, the right side gets 3, bottom 2, and top 4. Any other boundary gets 7. in 3D the threshold is a bit larger (1e-2) and x-direction gets 1, 3, y-direction gets 2, 4, and z-direction gets 5, 6. Any other boundary gets 7. You can also specify a file containing a list of integers per each edge/face of the mesh indicating the tag in the json value bc_tag . If you want to run the real plate with hole problem you need to choose GenericTensor as problem, set the correct Lame constants in params , and specify the proper boundary conditions in problem_params . For this example we want Neumann boundary condition of [100, 0] (a force of 100 in x) applied to the whole right side (pulling), so in the neumann_boundary array of problem_params we add en entry with id 3 and value [100, 0]. For the 2 Dirichlet is a bit more complicated because we want reflective boundary condition, that is we want to fix only one of the 2 coordinates. For instance, the right part of the mesh (id 1) needs to be fixed in x (or equivalent can move only in y-direction). To do so we add an entry to the dirichlet_boundary array with id 1 and value [0, 0], that is zero displacement, and specify which dimension these boundaries needs to be applied, in this case only the x-direction so dimension gets the value [true, false] . Similarly the top part (id 4) gets dimension=[false, true] . { ... \"problem\" : \"GenericTensor\" , \"params\" : { \"E\" : 210000 , \"nu\" : 0.3 }, \"problem_params\" : { \"neumann_boundary\" : [ { \"id\" : 3 , \"value\" : [ 100 , 0 ] } ], \"dirichlet_boundary\" : [ { \"id\" : 1 , \"dimension\" : [ true , false ], \"value\" : [ 0.0 , 0.0 ] }, { \"id\" : 4 , \"dimension\" : [ false , true ], \"value\" : [ 0.0 , 0.0 ] } ] } Note that as value you can also specify an expression as string depending on x,y,z and PolyFEM will evaluate that expression on the edge/face. Since creating the file with association from boundary to id it is complicated, we also provide an application bc_setter to interactively color faces of 3D meshes (or edges of 2D meshes) and associate tags. By shift clicking you can color coplanar faces to assign and id ( command or control click colors only one face). The UI also allow to specify the 3 values (for scalar problem only one) to assign to that boundary condition and choose between Dirichelt and Neumann. On save it will produce the txt file with the tags to be used in bc_tag and a json file to set the problem_params . Note, if you selected the vector problem you need to use \"problem\": \"GenericTensor\" otherwise \"problem\": \"GenericScalar\" .","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Here you can find the plate with hole mesh used in this tutorial.","title":"Tutorial"},{"location":"tutorial/#ui","text":"Start the program with PolyFEM_bin this will open the UI. Press the the load button to load a mesh Then press the numbered button in sequence: Loads the mesh and normalized it Builds the FEM bases, you can change the order by changing discr. To enable pref or spline check the corresponding boxes (before pushing the button) Build a denser mesh for visualization purposes. Assembles the right-hand side of the problem. You can change the problem with the problem drop-down menu Assembles the matrix. You can change the formulation by changing the drop-down 1D nD Mixed form. The type of formulation depends on the problem. For instance Franke works only with scalar formulations, while Elastic only with tensor problems. Solve problem solves the problem. You can compute the error for problems with given exact solutions. In case of no exact solution, the program will compute the norms of the solutions At the end you can press save VTU to save the result.vtu file in the binary directory. This file can be opened with Paraview","title":"UI"},{"location":"tutorial/#json","text":"To run the previous experiment with a json file create a run.json containing (refer to documentation for the full description): { \"mesh\" : \"<mesh.obj>\" , \"normalize_mesh\" : true , \"n_refs\" : 0 , \"scalar_formulation\" : \"Laplacian\" , \"discr_order\" : 1 , \"use_spline\" : false , \"use_p_ref\" : false , \"output\" : \"<stats.json>\" , \"problem\" : \"Franke\" , \"export\" : { \"vis_mesh\" : \"<result.vtu>\" , } } Then run PolyFEM_bin --json run.json --cmd . You can omit the --cmd argument to open the UI with the parameters.","title":"JSON"},{"location":"tutorial/#boundary-conditions","text":"For more advanced problems such as GenericTensor , TorsionElastic , or DrivenCavity the boundary conditions might be different for each boundary. For instance for the TorsionElastic problem you need to specify which part is fixed and which part moves. PolyFEM uses boundary tags to mark boundary primitives (edges in 2D and faces in 3D). By default: in 2D all edges which barycenter is close up to 1e-7 to the left side of the bounding box gets tag 1, the right side gets 3, bottom 2, and top 4. Any other boundary gets 7. in 3D the threshold is a bit larger (1e-2) and x-direction gets 1, 3, y-direction gets 2, 4, and z-direction gets 5, 6. Any other boundary gets 7. You can also specify a file containing a list of integers per each edge/face of the mesh indicating the tag in the json value bc_tag . If you want to run the real plate with hole problem you need to choose GenericTensor as problem, set the correct Lame constants in params , and specify the proper boundary conditions in problem_params . For this example we want Neumann boundary condition of [100, 0] (a force of 100 in x) applied to the whole right side (pulling), so in the neumann_boundary array of problem_params we add en entry with id 3 and value [100, 0]. For the 2 Dirichlet is a bit more complicated because we want reflective boundary condition, that is we want to fix only one of the 2 coordinates. For instance, the right part of the mesh (id 1) needs to be fixed in x (or equivalent can move only in y-direction). To do so we add an entry to the dirichlet_boundary array with id 1 and value [0, 0], that is zero displacement, and specify which dimension these boundaries needs to be applied, in this case only the x-direction so dimension gets the value [true, false] . Similarly the top part (id 4) gets dimension=[false, true] . { ... \"problem\" : \"GenericTensor\" , \"params\" : { \"E\" : 210000 , \"nu\" : 0.3 }, \"problem_params\" : { \"neumann_boundary\" : [ { \"id\" : 3 , \"value\" : [ 100 , 0 ] } ], \"dirichlet_boundary\" : [ { \"id\" : 1 , \"dimension\" : [ true , false ], \"value\" : [ 0.0 , 0.0 ] }, { \"id\" : 4 , \"dimension\" : [ false , true ], \"value\" : [ 0.0 , 0.0 ] } ] } Note that as value you can also specify an expression as string depending on x,y,z and PolyFEM will evaluate that expression on the edge/face. Since creating the file with association from boundary to id it is complicated, we also provide an application bc_setter to interactively color faces of 3D meshes (or edges of 2D meshes) and associate tags. By shift clicking you can color coplanar faces to assign and id ( command or control click colors only one face). The UI also allow to specify the 3 values (for scalar problem only one) to assign to that boundary condition and choose between Dirichelt and Neumann. On save it will produce the txt file with the tags to be used in bc_tag and a json file to set the problem_params . Note, if you selected the vector problem you need to use \"problem\": \"GenericTensor\" otherwise \"problem\": \"GenericScalar\" .","title":"Boundary Conditions"}]}